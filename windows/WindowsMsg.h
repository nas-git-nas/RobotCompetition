// Generated by gencpp from file global_path_planner/WindowsMsg.msg
// DO NOT EDIT!


#ifndef GLOBAL_PATH_PLANNER_MESSAGE_WINDOWSMSG_H
#define GLOBAL_PATH_PLANNER_MESSAGE_WINDOWSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>

namespace global_path_planner
{
template <class ContainerAllocator>
struct WindowsMsg_
{
  typedef WindowsMsg_<ContainerAllocator> Type;

  WindowsMsg_()
    : var1()
    , var2()  {
    }
  WindowsMsg_(const ContainerAllocator& _alloc)
    : var1(_alloc)
    , var2(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _var1_type;
  _var1_type var1;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _var2_type;
  _var2_type var2;





  typedef boost::shared_ptr< ::global_path_planner::WindowsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_path_planner::WindowsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct WindowsMsg_

typedef ::global_path_planner::WindowsMsg_<std::allocator<void> > WindowsMsg;

typedef boost::shared_ptr< ::global_path_planner::WindowsMsg > WindowsMsgPtr;
typedef boost::shared_ptr< ::global_path_planner::WindowsMsg const> WindowsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::global_path_planner::WindowsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::global_path_planner::WindowsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::global_path_planner::WindowsMsg_<ContainerAllocator1> & lhs, const ::global_path_planner::WindowsMsg_<ContainerAllocator2> & rhs)
{
  return lhs.var1 == rhs.var1 &&
    lhs.var2 == rhs.var2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::global_path_planner::WindowsMsg_<ContainerAllocator1> & lhs, const ::global_path_planner::WindowsMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace global_path_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_path_planner::WindowsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_path_planner::WindowsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_path_planner::WindowsMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "348eb56e7b29715f3bc3e110e2245551";
  }

  static const char* value(const ::global_path_planner::WindowsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x348eb56e7b29715fULL;
  static const uint64_t static_value2 = 0x3bc3e110e2245551ULL;
};

template<class ContainerAllocator>
struct DataType< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "global_path_planner/WindowsMsg";
  }

  static const char* value(const ::global_path_planner::WindowsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 var1\n"
"std_msgs/Int32 var2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::global_path_planner::WindowsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.var1);
      stream.next(m.var2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WindowsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_path_planner::WindowsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::global_path_planner::WindowsMsg_<ContainerAllocator>& v)
  {
    s << indent << "var1: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.var1);
    s << indent << "var2: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.var2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOBAL_PATH_PLANNER_MESSAGE_WINDOWSMSG_H
